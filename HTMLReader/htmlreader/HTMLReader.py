# -*- coding: utf-8 -*-
"""
/***************************************************************************
 HTMLReader
                                 A QGIS plugin
 Este pluggin interpreta Etiquetas HTML en qgis
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2022-09-05
        git sha              : $Format:%H$
        copyright            : (C) 2022 by tum
        email                : tum@mal.com
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""
import os
import os.path
from qgis.PyQt.QtCore import (
    QSettings, 
    QTranslator, 
    QCoreApplication, 
    QUrl,
    Qt,
    QTimer
)
from qgis.PyQt.QtGui import QIcon
from qgis.PyQt.QtWidgets import (
    QAction,
    QLineEdit, 
    QWidget,
    QSizePolicy, 
    QScrollArea
)
from qgis.PyQt.QtWebKitWidgets import QWebView
from qgis.core import (
    QgsProject,
    QgsRectangle,
    QgsVectorLayer,
    QgsPoint,
    QgsWkbTypes
)

import xml.etree.ElementTree as obj

from qgis import processing

# Initialize Qt resources from file resources.py
from .resources import *
# Import the code for the dialog
from .HTMLReader_dialog import HTMLReaderDialog

class HTMLReader:
    """QGIS Plugin Implementation."""

    def __init__(self, iface):
        """Constructor.

        :param iface: An interface instance that will be passed to this class
            which provides the hook by which you can manipulate the QGIS
            application at run time.
        :type iface: QgsInterface
        """
        # Save reference to the QGIS interface
        self.iface = iface
        # initialize plugin directory
        self.plugin_dir = os.path.dirname(__file__)
        # initialize locale
        locale = QSettings().value('locale/userLocale')[0:2]
        locale_path = os.path.join(
            self.plugin_dir,
            'i18n',
            'HTMLReader_{}.qm'.format(locale)) #pylint: disable=consider-using-f-string

        if os.path.exists(locale_path):
            self.translator = QTranslator()
            self.translator.load(locale_path)
            QCoreApplication.installTranslator(self.translator)

        # Declare instance attributes
        self.actions = []
        self.menu = self.tr('&HTML Reader')

        # Check if plugin was started the first time in current QGIS session
        # Must be set in initGui() to survive plugin reloads
        self.first_start = None
        self.dlg = HTMLReaderDialog()
        self.webView = QWebView()
        self.timer = QTimer()
    # noinspection PyMethodMayBeStatic
    def tr(self, message):
        """Get the translation for a string using Qt translation API.

        We implement this ourselves since we do not inherit QObject.

        :param message: String for translation.
        :type message: str, QString

        :returns: Translated version of message.
        :rtype: QString
        """
        # noinspection PyTypeChecker,PyArgumentList,PyCallByClass
        return QCoreApplication.translate('HTMLReader', message)


    def add_action(
        self,
        icon_path,
        text,
        callback,
        enabled_flag=True,
        add_to_menu=True,
        add_to_toolbar=True,
        status_tip=None,
        whats_this=None,
        parent=None):
        """Add a toolbar icon to the toolbar.

        :param icon_path: Path to the icon for this action. Can be a resource
            path (e.g. ':/plugins/foo/bar.png') or a normal file system path.
        :type icon_path: str

        :param text: Text that should be shown in menu items for this action.
        :type text: str

        :param callback: Function to be called when the action is triggered.
        :type callback: function

        :param enabled_flag: A flag indicating if the action should be enabled
            by default. Defaults to True.
        :type enabled_flag: bool

        :param add_to_menu: Flag indicating whether the action should also
            be added to the menu. Defaults to True.
        :type add_to_menu: bool

        :param add_to_toolbar: Flag indicating whether the action should also
            be added to the toolbar. Defaults to True.
        :type add_to_toolbar: bool

        :param status_tip: Optional text to show in a popup when mouse pointer
            hovers over the action.
        :type status_tip: str

        :param parent: Parent widget for the new action. Defaults None.
        :type parent: QWidget

        :param whats_this: Optional text to show in the status bar when the
            mouse pointer hovers over the action.

        :returns: The action that was created. Note that the action is also
            added to self.actions list.
        :rtype: QAction
        """

        icon = QIcon(icon_path)
        action = QAction(icon, text, parent)
        action.triggered.connect(callback)
        action.setEnabled(enabled_flag)

        if status_tip is not None:
            action.setStatusTip(status_tip)

        if whats_this is not None:
            action.setWhatsThis(whats_this)

        if add_to_toolbar:
            # Adds plugin icon to Plugins toolbar
            self.iface.addToolBarIcon(action)

        if add_to_menu:
            self.iface.addPluginToMenu(
                self.menu,
                action)

        self.actions.append(action)

        return action

    def initGui(self):
        """Create the menu entries and toolbar icons inside the QGIS GUI."""

        icon_path = ':/plugins/HTMLReader/icon.png'
        self.add_action(
            icon_path,
            text=self.tr('HTML Reader'),
            callback=self.run,
            parent=self.iface.mainWindow())

        # will be set False in run()
        self.first_start = True


    def unload(self):
        """Removes the plugin menu item and icon from QGIS GUI."""
        for action in self.actions:
            self.iface.removePluginMenu(
                self.tr('&HTML Reader'),
                action)
            self.iface.removeToolBarIcon(action)


    def run(self):
        """Run method that performs all the real work"""

        # Create the dialog with elements (after translation) and keep reference
        # Only create GUI ONCE in callback,
        # so that it will only load when the plugin is started
        if self.first_start is True:
            self.first_start = False
            #self.timer.timeout.connect(self.follow)
            self.timer.start(1)
            #self.distanceMatrix()
            self.dlg.pushButton_3.clicked.connect(self.follow)
            self.dlg.pushButton.clicked.connect(self.atras)
            self.dlg.pushButton_2.clicked.connect(self.adelante)
        # show the dialog
        self.dlg.show()
        # Run the dialog event loop
        result = self.dlg.exec_()
        # See if OK was pressed
        if result:
            # Do something useful here - delete the line containing pass and
            # substitute with your code.
            self.timer.stop()

    def adelante(self, selection):
        """Esta función debe de abrir el punto de avance
        más cercano al punto actual"""
        try:
            pat = 'file:///home/kenriquez/Documentos/'+ \
            'Pruebas/360HTML/Ruta_maritima/'
            layer = self.iface.activeLayer()
            selection = layer.selectedFeatures()
            for feat in selection:
                x = feat[30].split("P")
                y = int(x[1]) + 1
                z ="P" + str(y)
                print(z)
                f = pat +z+ '/index.html'
                self.webView.load(QUrl(f))
                self.webView.page()
                self.webView.show()
            layer.removeSelection()
        except: # pylint: disable=W0702
            self.timer.stop()
            layer = self.iface.activeLayer()
            layer.removeSelection()
            print("Algo salio mal :(")

    def atras(self):
        """Esta Función debe abrir el punto de retroceso
        más cercano al punto actual"""
        pat = 'file:///home/kenriquez/Documentos/'+ \
        'Pruebas/360HTML/Ruta_maritima/'
        layer = self.iface.activeLayer()
        self.webView.show()
        print(pat)
        layer.removeSelection()

    def follow(self):
        """Esta función abre el html
        de un punto previamente seleccionado"""
        f = "www.google.com"
        pat = 'file:///home/kenriquez/Documentos/'+ \
            'Pruebas/360HTML/Ruta_maritima/'
        layer = self.iface.activeLayer()
        selection = layer.selectedFeatures()
        for feat in selection:
            #a = feat.attributes()
            f = pat +feat[30]+ '/index.html'
            self.webView.load(QtCore.QUrl(f))
            self.webView.page()
            self.webView.show()
        file = '/home/kenriquez/Documentos/Pruebas/HTMLReader/'+ \
            'htmlreader/HTMLReader_dialog_base.ui'

        def updateXml(filename, f):
            """Esta funcion debe de cambiar el string del XML"""
            tree = obj.ElementTree(file=filename)
            root = tree.getroot()

            wid = root.find('./widget/layout/item/'+ \
                'widget/property/url/string')
            wid.text = f

            tree = obj.ElementTree(root)

            with open(filename, "wb") as fileupdate:
                tree.write(fileupdate)

        updateXml(file, f)
        layer.removeSelection()

        #except: # pylint: disable=W0702
            #self.timer.stop()
            #layer = self.iface.activeLayer()
            #layer.removeSelection()
            #print("Algo salio mal :(")
            #print(TypeError())

    def distance(self):
        """Esta función obtiene la distancia
        entre dos puntos de Qgis"""
        x = QgsPoint(-121.54,17.04)
        y = QgsPoint(-125.30,16.78)
        distance = x.distance(y)
        m = distance
        print(m)
        print("-----------")

    def location(self):
        """Esta función obtiene la localización
        de un punto en el plano de Qgis"""
        layer = self.iface.activeLayer()
        features = layer.selectedFeatures()

        for feature in features:
            geom = feature.geometry()
            geomSingleType = QgsWkbTypes.isSingleType(geom.wkbType())
            if geom.type() == QgsWkbTypes.PointGeometry:
                # the geometry type can be of single or multi type
                if geomSingleType:
                    x = geom.asPoint()
                    print("Point: ", x)
                else:
                    x = geom.asMultiPoint()
                    print("MultiPoint: ", x)
            elif geom.type() == QgsWkbTypes.LineGeometry:
                if geomSingleType:
                    x = geom.asPolyline()
                    print("Line: ", x, "length: ", geom.length())
                else:
                    x = geom.asMultiPolyline()
                    print("MultiLine: ", x, "length: ", geom.length())
            elif geom.type() == QgsWkbTypes.PolygonGeometry:
                if geomSingleType:
                    x = geom.asPolygon()
                    print("Polygon: ", x, "Area: ", geom.area())
                else:
                    x = geom.asMultiPolygon()
                    print("MultiPolygon: ", x, "Area: ", geom.area())
            else:
                print("Unknown or invalid geometry")
            break
    def distanceMatrix(self):
        """Esta funcion crea una capa nueva con
        la distancia entre los puntos más cercanos a cada uno."""
        layerDm = self.iface.activeLayer()
        processing.run("qgis:distancematrix", {'INPUT': layerDm,
        'INPUT_FIELD': 'HTML', 'TARGET': layerDm,
        'TARGET_FIELD': 'HTML',
        'MATRIX_TYPE': 0,
        'NEAREST_POINTS': 2,
        'OUTPUT': '/home/kenriquez/Descargas/" + \
            "puntos prueba-20220908T185645Z-001/PyLayer.shp'})
        pathLayer = "/home/kenriquez/Descargas/" + \
            "puntos prueba-20220908T185645Z-001/PyLayer.shp"
        vlayer = QgsVectorLayer(pathLayer, "PyLayer", "ogr")
        if not vlayer.isValid():
            print("Layer failed to load!")
        else:
            QgsProject.instance().addMapLayer(vlayer)

    #def follow(self):
        #"""Esta función abre el html
        #de un punto previamente seleccionado"""
        #try:
            #pat = 'file:///home/kenriquez/Documentos/'+ \
                #'Pruebas/360HTML/Ruta_maritima/'
            #layer = self.iface.activeLayer()
            #selection = layer.selectedFeatures()
            #for feat in selection:
                #a = feat.attributes()
                #f = pat +feat[30]+ '/index.html'
                #self.webView.load(QtCore.QUrl(f))
                #self.webView.page()
                #self.webView.show()
            #layer.removeSelection()
        #except: # pylint: disable=W0702
            #self.timer.stop()
            #layer = self.iface.activeLayer()
            #layer.removeSelection()
            #print("Algo salio mal :(")
            #print(TypeError())
                